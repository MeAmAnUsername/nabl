package mb.p_raffrayi.impl.confirm;

import org.metaborg.util.functions.Action0;
import org.metaborg.util.functions.Action2;
import org.metaborg.util.functions.Function0;
import org.metaborg.util.functions.Function2;

import mb.scopegraph.patching.IPatchCollection;
import mb.scopegraph.patching.PatchCollection;

public abstract class ConfirmResult<S> {

    @SuppressWarnings("rawtypes") private static final ConfirmResult.Deny DENY = new ConfirmResult.Deny<>();

    @SuppressWarnings({ "rawtypes" }) private static final ConfirmResult.Confirm EMPTY_CONFIRM =
            new ConfirmResult.Confirm<>(PatchCollection.Immutable.of(), PatchCollection.Immutable.of());

    public abstract <T> T match(Function0<T> onDeny,
            Function2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>, T> onConfirm);

    public abstract void visit(Action0 onDeny,
            Action2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>> onConfirm);

    @SuppressWarnings("unchecked") public static <S> ConfirmResult<S> deny() {
        return DENY;
    }

    public static <S> ConfirmResult<S> confirm(IPatchCollection.Immutable<S> patches) {
        return confirm(patches, true);
    }

    public static <S> ConfirmResult<S> confirm(IPatchCollection.Immutable<S> patches, boolean include) {
        return include ? confirm(PatchCollection.Immutable.of(), patches)
                : confirm(patches, PatchCollection.Immutable.of());
    }

    public static <S> ConfirmResult<S> confirm(IPatchCollection.Immutable<S> resultPatches,
            IPatchCollection.Immutable<S> globalPatches) {
        return new ConfirmResult.Confirm<>(resultPatches, globalPatches);
    }

    @SuppressWarnings("unchecked") public static <S> ConfirmResult<S> confirm() {
        return EMPTY_CONFIRM;
    }

    private static class Deny<S> extends ConfirmResult<S> {

        @Override public <T> T match(Function0<T> onDeny,
                Function2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>, T> onConfirm) {
            return onDeny.apply();
        }

        @Override public void visit(Action0 onDeny,
                Action2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>> onConfirm) {
            onDeny.apply();
        }

        @Override public int hashCode() {
            return 42;
        }

        @Override public boolean equals(Object obj) {
            return obj == this;
        }

        @Override public String toString() {
            return "Deny{}";
        }

    }

    private static class Confirm<S> extends ConfirmResult<S> {

        // Patches generated by queries executed for predicate evaluation (nested queries)
        // do not need to be applied to the type-checker result, as scopes can never 'leak' from
        // a DataWF/DataEquiv instance into the query answer. However, they need to be applied to
        // the recorded queries. Therefore, a confirmation result holds two patch collections.
        // The `resultPatches` holds the patches that need to be applied to the scope graph/analysis results
        // and the `globalPatches` contains the patches that need to be applied to the recorded queries only.

        private final IPatchCollection.Immutable<S> resultPatches;
        private final IPatchCollection.Immutable<S> globalPatches;

        private Confirm(IPatchCollection.Immutable<S> resultPatches, IPatchCollection.Immutable<S> globalPatches) {
            this.resultPatches = resultPatches;
            this.globalPatches = globalPatches;
        }

        @Override public <T> T match(Function0<T> onDeny,
                Function2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>, T> onConfirm) {
            return onConfirm.apply(resultPatches, globalPatches);
        }

        @Override public void visit(Action0 onDeny,
                Action2<IPatchCollection.Immutable<S>, IPatchCollection.Immutable<S>> onConfirm) {
            onConfirm.apply(resultPatches, globalPatches);
        }

        @Override public int hashCode() {
            return 17 + 31 * resultPatches.hashCode() + 37 * globalPatches.hashCode();
        }

        @SuppressWarnings("unchecked") @Override public boolean equals(Object obj) {
            if(obj == this) {
                return true;
            }
            if(obj == null) {
                return false;
            }
            if(!obj.getClass().equals(this.getClass())) {
                return false;
            }
            final Confirm<S> other = (Confirm<S>) obj;
            return resultPatches.equals(other.resultPatches) && globalPatches.equals(other.globalPatches);
        }

        @Override public String toString() {
            return "Confirm{resultPatches=" + resultPatches + ", globalPatches=" + globalPatches + "}";
        }

    }
}
