resolve {s T e}

  new s, typeOfExp(s, e) == T

signature
  sorts ID = string                         // $x$

  sorts Exp constructors                    // $e$ :=
    Unit    : Exp                           //      | ()
    Fun     : ID * Type * Exp -> Exp        //      | fun ($x$ : $T$) { $e$ }
    Var     : ID -> Exp                     //      | $x$
    App     : Exp * Exp -> Exp              //      | $e$ $e$
    Let     : list(Bind) * Exp -> Exp       //      | let $b*$ in $e$

  sorts Bind constructors                   // $b$ :=
    Bind : ID * Type * Exp -> Bind          //      | $x$ : $T$ = $e$

  sorts Type constructors
    UNIT : Type
    FUN  : Type * Type -> Type

  relations
    typeOfDecl : occurrence -> Type

  namespaces
    Var  : string

  name-resolution
    labels P
    resolve Var filter P* min $ < P

rules

  typeOfExp : scope * Exp -> Type

  typeOfExp(_, Unit()) = UNIT().

  typeOfExp(s, Fun(x, S, e)) = FUN(S, T) :- {s_fun}
    new s_fun, s_fun -P-> s,
    s_fun -> Var{x@x} with typeOfDecl S,
    typeOfExp(s_fun, e) == T.

  typeOfExp(s, Var(x)) = T :- {p d}
    typeOfDecl of Var{x@x} in s |-> [(p, (d, T))].

  typeOfExp(s, App(e1, e2)) = T :- {S U}
    typeOfExp(s, e1) == FUN(S, T),
    typeOfExp(s, e2) == U,
    U == S.

  typeOfExp(s, Let(binds, e)) = T :- {s_let}
    new s_let, s_let -P-> s,
    bindsOk(s, binds, s_let),
    typeOfExp(s_let, e) == T,
    binds != []. // additive

  bindOk : scope * Bind * scope

  bindOk(s, Bind(x, T, e), s_bnd) :-
    s_bnd -> Var{x@x} with typeOfDecl T,
    typeOfExp(s, e) == T.

  bindsOk maps bindOk(*, list(*), *)
