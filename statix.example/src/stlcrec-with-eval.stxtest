resolve {e T v}

  e == App(Fun("x", UnitType(), Var("x")), Unit()),

  ({s} new s, T == typeOfExp(s, e)),

  ({f} new f, v == evalExp(f, e))

signature

  sorts ID = string                                  // x

  sorts Exp constructors                             // e :=
    Unit    : Exp                                    //    | unit
    Fun     : ID * TypeExp * Exp -> Exp              //    | fun (x : te) { e }
    Var     : ID -> Exp                              //    | x
    App     : Exp * Exp -> Exp                       //    | e e
    Rec     : list(Bind) -> Exp                      //    | { b* }
    FAccess : Exp * ID -> Exp                        //    | e.x
    Let     : list(Bind) * Exp -> Exp                //    | let b+ in e

  sorts Bind constructors                            // b :=
    Bind : ID * Exp -> Bind                          //    | x = e

  sorts TypeExp constructors                         // te :=
    UnitType : TypeExp                               //     | unit
    FunType  : TypeExp * TypeExp -> TypeExp          //     | te -> te
    RecType  : list(Decl) -> TypeExp                 //     | { d* }

  sorts Decl constructors                            // d :=
    Decl : ID * TypeExp -> Decl                      //    | x : te

signature

  sorts Type constructors
    UNIT  : Type
    FUN   : Type * Type -> Type
    REC   : scope -> Type

  relations
    typeOfDecl : occurrence -> Type

  namespaces
    Var  : string

  name-resolution
    labels P
    resolve Var filter P* min $ < P

rules

  programOK : Exp
  programOK(e) :- {s T}
    new s,
    typeOfExp(s, e) == T.

rules

  typeOfExp : scope * Exp -> Type

  [T-Unit]
  typeOfExp(s, Unit()) = UNIT().

  [T-Fun]
  typeOfExp(s, Fun(x, te, e)) = FUN(S, T) :- {s_fun}
    typeOfTypeExp(s, te) == S,
    new s_fun, s_fun -P-> s,
    s_fun -> Var{x@x} with typeOfDecl S,
    typeOfExp(s_fun, e) == T.

  [T-Var]
  typeOfExp(s, Var(x)) = T :- {d}
    typeOfDecl of Var{x@x} in s |-> [(_, (d, T))].

  [T-App]
  typeOfExp(s, App(e1, e2)) = T :- {S U}
    typeOfExp(s, e1) == FUN(S, T),
    typeOfExp(s, e2) == U,
    subType(U, S).

  [T-Rec]
  typeOfExp(s, Rec(finits)) = REC(rs) :-
    new rs, fieldInitsOK(s, finits, rs).

  [T-Fld]
  typeOfExp(s, FAccess(e, x)) = T :- {rs}
    typeOfExp(s, e) == REC(rs),
    typeOfDecl of /*Fld*/Var{x@x} in rs |-> [(_, (_, T))].

  [T-Let]
  typeOfExp(s, Let(binds, e)) = T :- {s_let}
    binds != [],
    new s_let, s_let -P-> s,
    letBindsOK(s, binds, s_let),
    typeOfExp(s_let, e) == T.

rules

  letBindOK : scope * Bind * scope
  letBindsOK maps letBindOK(*, list(*), *)

  [T-Bind]
  letBindOK(s, Bind(x, e), s_bnd) :-
    s_bnd -> Var{x@x} with typeOfDecl typeOfExp(s, e).

rules

  fieldInitOK : scope * Bind * scope
  fieldInitsOK maps fieldInitOK(*, list(*), *)

  fieldInitOK(s, Bind(x, e), rs) :- {T}
    rs -> /*Fld*/Var{x@x} with typeOfDecl typeOfExp(s, e),
    unique(x, rs).

  unique : ID * scope
  unique(x, s) :-
    /*Fld*/Var{x@x} in s |-> [_].

rules

  typeOfTypeExp : scope * TypeExp -> Type

  [TE-Unit]
  typeOfTypeExp(s, UnitType()) = UNIT().

  [TE-Fun]
  typeOfTypeExp(s, FunType(te1, te2)) = FUN(T1, T2) :-
    typeOfTypeExp(s, te1) == T1,
    typeOfTypeExp(s, te2) == T2.

  [TE-Rec]
  typeOfTypeExp(s, RecType(ftypes)) = REC(rs) :-
    new rs, fieldTypesOK(s, ftypes, rs).

rules

  fieldTypeOK : scope * Decl * scope
  fieldTypesOK maps fieldTypeOK(*, list(*), *)

  fieldTypeOK(s, Decl(x, te), rs) :-
    rs -> /*Fld*/Var{x@x} with typeOfDecl typeOfTypeExp(s, te),
    unique(x, rs).

rules

  subType  : Type * Type
  subField : scope * (path * occurrence)
  subFields maps subField(*, list(*))

  subType(UNIT(), UNIT()).

  subType(FUN(S1, T1), FUN(S2, T2)) :- subType(S2, S1), subType(T1, T2).

  subType(REC(s_sub), REC(s_sup)) :- subFields(s_sub, allFields(s_sup)).

  subField(s_sub, (p_sup, d_sup@/*Fld*/Var{x@i})) :- {S T}
    S == ?typeOfDecl[d_sup] in dst(p_sup),
    typeOfDecl of /*Fld*/Var{x@i} in s_sub |-> [(_, (_, T))],
    subType(T, S).

  allFields: scope -> list((path * occurrence))
  allFields(s) = ps :-
    query decl
          filter e and { /*Fld*/Var{_@_} }
          min /* */ and { /*Fld*/Var{x@_}, /*Fld*/Var{x@_} }
          in s |-> ps.

signature

  sorts Frame = scope

  sorts Val constructors
    UnitV : Val
    ClosV : Frame * ID * Exp -> Val

  relations
    val : occurrence -> Val

rules

  evalExp : Frame * Exp -> (Val * int)

  [E-Unit]
  evalExp(f, Unit()) = (UnitV(), 0).

  [E-Fun]
  evalExp(f, Fun(x, S, e)) = (ClosV(f, x, e), 0).

  [E-Var]
  evalExp(f, Var(x)) = (v, 0) :- {p d}
    val of Var{x@x} in f |-> [(p, (d, v))].

  [E-App]
  evalExp(f, App(e1, e2)) = (v, #(1 + k + k1 + k2)) :- {f_clos x e f_app v'}
    evalExp(f, e1) == (ClosV(f_clos, x, e), k1),
    evalExp(f, e2) == (v', k2),
    new f_app, f_app -P-> f_clos,
    f_app -> Var{x@x} with val v',
    evalExp(f_app, e) == (v, k).

  [E-Let]
  evalExp(f, Let(binds, e)) = (v, #(k + k')) :- {f_let}
    new f_let,
    evalBinds(f, binds, f_let) == k',
    evalExp(f_let, e) == (v, k).


  evalBind : Frame * Bind * Frame -> int

  [E-Bind]
  evalBind(f, Bind(x, e), f_bnd) = k :- {v}
    evalExp(f, e) == (v, k),
    f_bnd -> Var{x@x} with val v.


  evalBinds : Frame * list(Bind) * Frame -> int
  
  evalBinds(f, [], f_bnd) = 0.

  evalBinds(f, [bind|binds], f_bnd) = #(k + k') :-
    evalBind(f, bind, f_bnd) == k,
    evalBinds(f, binds, f_bnd) == k'.


rules

  dst : path -> scope
  dst(_PathEmpty(s)) = s.
  dst(_PathStep(_, _, s)) = s.

