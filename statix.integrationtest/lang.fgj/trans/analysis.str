module analysis

imports

  libspoofax/core/language
  libspoofax/sdf/pp

  statixruntime
  statix/api

  injections/-
  injections/statix/-
  signatures/-
  pp/-
  pp

rules // Analysis

  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "startOK")

  pre-analyze  = explicate-injections-FGJ-Start
  post-analyze = implicate-injections-FGJ-Start

  // fix injection strategies for different pretty-print name

  explicate-injections-FGJ-Stx-INT        = explicate-injections-Stx-INT
  explicate-injections-FGJ-Stx-STRING     = explicate-injections-Stx-STRING
  explicate-injections-FGJ-Stx-Scope      = explicate-injections-Stx-Scope
  explicate-injections-FGJ-Stx-Occurrence = explicate-injections-Stx-Occurrence
  explicate-injections-FGJ-Stx-TermIndex  = explicate-injections-Stx-TermIndex

  implicate-injections-FGJ-Stx-INT        = implicate-injections-Stx-INT
  implicate-injections-FGJ-Stx-STRING     = implicate-injections-Stx-STRING
  implicate-injections-FGJ-Stx-Scope      = implicate-injections-Stx-Scope
  implicate-injections-FGJ-Stx-Occurrence = implicate-injections-Stx-Occurrence
  implicate-injections-FGJ-Stx-TermIndim  = implicate-injections-Stx-TermIndex


rules // Editor services
  
  editor-resolve = stx-editor-resolve

  editor-hover:
      (node, position, ast, path, project-path) -> lbl
    where
      a  := <stx-get-ast-analysis> node
    ; ty := <stx-get-ast-type(|a)> node
    with
      lbl := <pp-TYPE(|a) <+ strip-annos;write-to-string> ty

rules

  pp-TYPE(|a): CLASS(s) -> <fail> // TODO Reconstruct human representation

  pp-TYPE(|a): TVAR(d) -> ty-str
    with ty-str := <stx-get-occurrence-terms;?[<id>]> d

rules // Debugging

  debug-show-analyzed:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast
