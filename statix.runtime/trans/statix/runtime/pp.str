module statix/runtime/pp

imports

  libstratego-gpp
  libspoofax/sdf/pp

  statix/runtime/-

  signatures/statix/runtime/-

  pp/statix/runtime/-

signature
  constructors
    Analysis : ScopeGraph -> Analysis // duplicate from statix/test/Result

rules

  parenthesize-Statix = fail

  pp-Statix-string(pp) =
    try(parenthesize-Statix)
    ; pp
    ; !V([], <id>)
    ; box2text-string(|120)

  pp-Statix-ATerm =
    pp-Statix-string(prettyprint-Statix-Stx-ATerm)

  pp-Statix-ScopeGraph =
    pp-Statix-string(prettyprint-Statix-Stx-ScopeGraph)

rules

  prettyprint-Statix-Stx-INT =
    where(is-int)
  ; ![S(<int-to-string>)]

  prettyprint-Statix-Stx-STRING =
    where(is-string)
  ; ![S(<id>)]

rules

// ATerm is a sort for any Stratego term. Pretty printing is generic, but specialized
// for Statix specific constructors such as scopes. This is achieved by the special
// pretty printing strategies here. The productions in statix/runtime/ATerm.sdf3 and
// strategies here must be kept in sync!

  stx--prettyprint-term =
    is-Statix-Stx-Var        < prettyprint-Statix-Stx-Var
  + is-Statix-Stx-Scope      < prettyprint-Statix-Stx-Scope
  + is-Statix-Stx-Occurrence < prettyprint-Statix-Stx-Occurrence
  + is-Statix-Stx-TermIndex  < prettyprint-Statix-Stx-TermIndex
  + fail


  stx--is-term =
    is-Statix-Stx-Var
  + is-Statix-Stx-Scope
  + is-Statix-Stx-Occurrence
  + is-Statix-Stx-TermIndex


  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [t1__']) ]
    where not(stx--is-term)
    where is-int
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-INT)> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [S("\""), t1__', S("\"")]) ]
    where not(stx--is-term)
    where is-string
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-STRING)> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__ -> [ H([SOpt(HS(), "0")], [S("["), t1__', S("]")]) ]
    where not(stx--is-term)
    where is-list
    with t1__' := <pp-H-list(prettyprint-Statix-Stx-ATerm|", ")> t1__

  prettyprint-Statix-Stx-ATerm:
      t1__#(t2__) -> [ H([SOpt(HS(), "0")], [t1__', S("("), t2__', S(")")]) ]
    where not(stx--is-term)
    with t1__' := <pp-one-Z(prettyprint-Statix-Stx-STRING)> t1__
    with t2__' := <pp-H-list(prettyprint-Statix-Stx-ATerm|", ")> t2__


  prettyprint-Statix-Analysis: a -> <prettyprint-Statix-Analysis> a'
    where <stx--is-analysis> a
    with a' := Analysis(<stx--debug-scopegraph> a)

