module scopegraphs/extension

language StatixLang

// direct extensions

test extend parameter scope in same rule succeeds [[
  module test
  signature
    relations foo : string
  rules
    c : scope
    c(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in same rule succeeds [[
  resolve {s} new s, !foo[""] in s
  signature
    relations foo : string
  rules
    c : 
    c() :- {s} new s, !foo[""] in s.
]] analysis succeeds

test predicate with two rules where one rule extends and creates succeeds [[
  resolve {s} c(_, s)
  signature
    relations foo : string
  rules
    c : int * scope
    c(1, s) :- new s, !foo[""] in s.
    c(_, s) :- true.
]] analysis succeeds

test extend local scope in same rule fails [[
  resolve {s} !foo[""] in [[s]]
  signature
    relations foo : string
  rules
    c : 
    c() :- {s} !foo[""] in [[s]].
]] 2 errors at #1, #2

// extension in one step

test extend parameter scope in via other constraint succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : scope
    c0(s) :- c1(s).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in via other constraint succeeds [[
  resolve {s} new s, c1(s)
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} new s, c1(s).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] analysis succeeds

test extend local scope in via other constraint fails [[
  resolve {s} c1([[s]])
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} c1([[s]]).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] 2 errors at #1, #2

// extension in two steps

test extend parameter scope in via two other constraints succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : scope
    c0(s) :- c1(s).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in via two other constraints succeeds [[
  resolve {s} new s, c1(s)
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} new s, c1(s).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] analysis succeeds

test extend local scope in via two other constraints fails [[
  resolve {s} c1([[s]])
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} c1([[s]]).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] 2 errors at #1, #2

// extensions on scopes from predicates

test extend scope from single-rule predicate succeeds [[
  resolve {s} c1(s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c1 : scope
    c1(s) :- new s.
]] analysis succeeds

test extend scope from single-rule predicate in two steps succeeds [[
  resolve {s} c2(s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c2 : scope
    c2(s) :- c1(s).

    c1 : scope
    c1(s) :- new s.
]] analysis succeeds

test extend scope from multi-rule predicate where all rules provide succeeds [[
  resolve {i s} c1(i, s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c1 : int * scope
    c1(1, s) :- new s.
    c1(2, s) :- new s.
]] analysis succeeds

test extend scope from multi-rule predicate where not all rules provide fails [[
  resolve {i s} c1(i, s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c1 : int * scope
    c1(1, s) :- new s.
    c1(2, s).
]] analysis fails

test extend scope from recursive multi-rule predicate where the base case provides succeeds [[
  resolve {is s} c1(is, s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c1 : list(int) * scope
    c1([], s) :- new s.
    c1([i|is], s) :- c1(is, s).
]] analysis succeeds

test extend scope via two cycles succeeds [[
  resolve {is s} c1(is, s), s -P-> s
  signature
    name-resolution
      labels P
  rules
    c1 : int * scope
    c1(1, s) :- new s.
    c1(i, s) :- c2(i, s).
    
    c2 : int * scope
    c2(1, s) :- new s.
    c2(i, s) :- c1(i, s).
]] analysis succeeds

// extension via sugar construct

test extend local scope via declaration sugar fails [[
  resolve {s} [[s]] -> Var{"x"@-}
  signature
    namespaces Var : string
  rules
    c : 
    c() :- {s} [[s]] -> Var{"x"@-}.
]] 2 errors at #1, #2

test extend local scope via functional constraint fails [[
  resolve {s} c1([[s]]) == _
  signature
    namespaces Var : string
  rules
    c0 : 
    c0() :- {s} c1([[s]]) == _.

    c1 : scope -> ()
    c1(s) = () :- s -> Var{"x"@-}.
]] 2 errors at #1, #2

// extension via mapped predicate constraint

test new extension of non-lifted parameter of lifted predicate succeeds [[
  resolve {s} new s, cs(s, [])
  signature
    relations
      r : int
  rules
    cs maps c(*, list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s} new s, cs(s, []).
]] analysis succeeds

test local extension of non-lifted parameter of lifted predicate fails [[
  resolve {s1 s2} new s1, s1 == s2, cs([[s2]], [])
  signature
    relations
      r : int
  rules
    cs maps c(*, list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, cs([[s2]], []).
]] 2 errors at #1, #2

test extension of lifted parameter of lifted predicate fails [[
  resolve {s1 s2} new s1, s1 == s2, cs([s2], [])
  signature
    relations
      r : int
  rules
    cs maps c([[list(*)]], list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, cs([s2], []).
]] 1 errors at #1


// extension via mapped functional constraint

test new extension of non-lifted parameter of lifted functional succeeds [[
  resolve {s} new s, fs(s, []) == _
  signature
    relations
      r : int
  rules
    fs maps f(*, list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.
    
    d :
    d() :- {s} new s, fs(s, []) == _.
]] analysis succeeds

test local extension of non-lifted parameter of lifted functional fails [[
  resolve {s1 s2} new s1, s1 == s2, fs([[s2]], []) == _
  signature
    relations
      r : int
  rules
    fs maps f(*, list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.

    d :
    d() :- {s1 s2} new s1, s1 == s2, fs([[s2]], []) == _.
]] 2 errors at #1, #2

test extension of lifted parameter of lifted functional fails [[
  resolve {s1 s2} new s1, s1 == s2, fs([s2], []) == _
  signature
    relations
      r : int
  rules
    fs maps f([[list(*)]], list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, fs([s2], []) == _.
]] 1 errors at #1

test extension of output of functional constraint fails [[
  resolve [[f()]] -> Var{"x"@-}
  signature
    namespaces Var : string
  rules
    c : 
    c() :- {s} [[f()]] -> Var{"x"@-}.
    f : -> scope
]] 0 errors

// extension in lambdas and tries

test extension of target scope in query fails [[
  resolve {s} query () filter e and { s' :- [[s']] -P-> s } in s |-> _
  signature
    name-resolution
      labels P
]] 1 errors at #1

test extension of scope data in query fails [[
  resolve {s} query r filter e and { s' :- [[s']] -P-> s } in s |-> _
  signature
    relations
      r : scope
    name-resolution
      labels P
]] 1 errors at #1

test creation of outer scope in try fails [[
  resolve {s} try { new [[s]] }
  signature
    name-resolution
      labels P
]] 1 errors at #1

test creation of outer scope in try fails [[
  resolve {s} try { try { new [[s]] } }
  signature
    name-resolution
      labels P
]] 1 errors at #1

test creation of outer scope in try fails [[
  resolve try { {s} [[s]] -P-> s, try { new [[s]] } }
  signature
    name-resolution
      labels P
]] 2 errors at #1, #2

test creation of outer scope in try fails [[
  resolve try { {s} s -P-> s, new s }
  signature
    name-resolution
      labels P
]] 0 errors

test creation of outer scope in try fails [[
  resolve {s} [[s]] -P-> s, try { new [[s]] }
  signature
    name-resolution
      labels P
]] 2 errors at #1, #2

test extension of outer scope in try fails [[
  resolve {s} new s, try { [[s]] -P-> s }
  signature
    name-resolution
      labels P
]] 1 errors at #1

test extension of outer scope in query fails [[
  resolve {s} [[s]] -P-> s, query () filter e and { s' :- new [[s]] } in s |-> _
  signature
    name-resolution
      labels P
]] 2 errors at #1, #2

test reference to non-scope outer variable succeeds [[
  resolve {s} try { c(s) }
  signature
    name-resolution
      labels P
  rules
    c : int
]] 0 errors

test usage of predicate which argument extends and provides requires no more permission succeeds [[
  resolve {s} c(s)
  signature
    name-resolution
      labels P
  rules
    c : scope
    c(s) :- new s, s -P-> s.

    d :
    d() :- {s} c(s).
]] 0 errors

test usage of predicate which argument extends and provides requires no more permission succeeds [[
  resolve {s} c(1, s)
  signature
    name-resolution
      labels P
  rules
    c : int * scope
    c(i, s) :- new s, s -P-> s, d(s).

    d : scope
    d(s) :- s -P-> s.
]] 0 errors

test multi-recursive predicate without news gives no permission fails [[
  resolve {s} c(s, [])
  signature
    relations
      r : int
  rules
    c : scope * list(int)
    c(s, []).
    c(s, [i|is]) :- !r[i] in s, c(s, is).
]] > 0 errors

test single-rule recursive predicate without news gives permission caveat succeeds [[
  resolve {s} c(s, [])
  signature
    relations
      r : int
  rules
    c : scope * list(int)
    c(s, [i|is]) :- !r[i] in s, c(s, is).
]] 0 errors

test multi-recursive predicate without news with wildcards gives no permission fails [[
  resolve {s} c(s, [])
  signature
    relations
      r : int
  rules
    c : scope * list(int)
    c(_, []).
    c(s, [i|is]) :- !r[i] in s, c(s, is).
]] > 0 errors
